name: 🚀 Deploy to AWS ECS (Java App)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: v2
  TASK_FAMILY: java-ecs-task
  ECS_CLUSTER_NAME: java-app-cluster
  ECS_SERVICE_NAME: java-app-service
  CONTAINER_NAME: java-app
  CODEDEPLOY_APP_NAME: JavaAppCodeDeploy
  CODEDEPLOY_GROUP_NAME: JavaAppDeploymentGroup
  APP_MESSAGE: "🔵 Up The Chels! Java ECS App Deployed via Terraform & GitHub Actions" # updated message for green deployment

jobs:
  deploy:
    name: Build, Push, and Deploy to ECS via CodeDeploy
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🛠️ Build, Tag, and Push Docker Image to ECR
        env:
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          docker build -t $ECR_URI:$IMAGE_TAG -f terraform/javaapp/Dockerfile terraform/javaapp
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: 🧩 Register new ECS Task Definition revision
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_FAMILY \
            --query taskDefinition > task-def.json

          jq 'del(.taskDefinitionArn, .requiresAttributes, .compatibilities, .revision, .status, .registeredAt, .registeredBy)' task-def.json > new-task-def.json

          jq --arg IMAGE_URI "$ECR_URI:$IMAGE_TAG" \
             --arg APP_MESSAGE "$APP_MESSAGE" \
            '.containerDefinitions[0].image = $IMAGE_URI |
             .containerDefinitions[0].environment = [{"name":"APP_MESSAGE","value":$APP_MESSAGE}]' \
            new-task-def.json > updated-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: 📦 Create CodeDeploy AppSpec revision file
        run: |
          cat <<EOF > revision.json
          {
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": "$(cat <<EOC
              {
                "version": 1,
                "Resources": [
                  {
                    "TargetService": {
                      "Type": "AWS::ECS::Service",
                      "Properties": {
                        "TaskDefinition": "$NEW_TASK_DEF_ARN",
                        "LoadBalancerInfo": {
                          "ContainerName": "$CONTAINER_NAME",
                          "ContainerPort": 8080
                        }
                      }
                    }
                  }
                ]
              }
              EOC
              )",
              "sha256": ""
            }
          }
          EOF

      - name: 🚀 Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --revision file://revision.json \
            --description "Green deployment with updated message"

      - name: ⏳ Wait for deployment to complete
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --query "deployments[0]" \
            --output text)

          aws deploy wait deployment-successful \
            --deployment-id $DEPLOYMENT_ID
