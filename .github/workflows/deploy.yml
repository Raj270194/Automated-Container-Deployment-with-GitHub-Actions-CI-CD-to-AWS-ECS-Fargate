name: Deploy Java App to ECS via CodeDeploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Green Deployment to ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
      CODEDEPLOY_APP_NAME: JavaAppCodeDeploy
      CODEDEPLOY_GROUP_NAME: JavaAppDeploymentGroup
      ECS_CLUSTER_NAME: java-app-cluster
      ECS_SERVICE_NAME: java-app-service
      TASK_FAMILY: java-ecs-task
      CONTAINER_NAME: java-app
      IMAGE_TAG: v2
      APP_MESSAGE: ðŸ”µ Up The Chels! Java ECS App Deployed via Terraform & GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Register new ECS task definition
        id: register-task
        run: |
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --container-definitions file://container-definitions.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF" >> $GITHUB_ENV

      - name: Create CodeDeploy revision.json
        run: |
          jq -n \
            --arg taskDefArn "$NEW_TASK_DEF_ARN" \
            --arg containerName "$CONTAINER_NAME" \
            '{
              revisionType: "AppSpecContent",
              appSpecContent: {
                content: (
                  {
                    version: 1,
                    Resources: [
                      {
                        TargetService: {
                          Type: "AWS::ECS::Service",
                          Properties: {
                            TaskDefinition: $taskDefArn,
                            LoadBalancerInfo: {
                              ContainerName: $containerName,
                              ContainerPort: 8080
                            }
                          }
                        }
                      }
                    ]
                  } | @json
                ),
                sha256: ""
              }
            }' > revision.json

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --revision file://revision.json \
            --description "$APP_MESSAGE"
