name: üöÄ Deploy Java App to ECS via CodeDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  IMAGE_TAG: v2
  TASK_FAMILY: java-ecs-task
  ECS_CLUSTER_NAME: java-app-cluster
  ECS_SERVICE_NAME: java-app-service
  CONTAINER_NAME: java-app
  CODEDEPLOY_APP_NAME: java-app-codedeploy
  CODEDEPLOY_GROUP_NAME: java-app-deployment-group
  APP_MESSAGE: "üîµ Up The Chels! Java ECS App Deployed via Terraform & GitHub Actions"

jobs:
  deploy:
    name: Build, Push, and Deploy to ECS via CodeDeploy
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üõ†Ô∏è Build, Tag, and Push Docker Image to ECR
        env:
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          docker build -t $ECR_URI:$IMAGE_TAG -f terraform/javaapp/Dockerfile terraform/javaapp
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: üßæ Generate container-definitions.json
        run: |
          cat > container-definitions.json <<EOF
          [
            {
              "name": "${CONTAINER_NAME}",
              "image": "${{ secrets.ECR_URI }}:${IMAGE_TAG}",
              "essential": true,
              "memory": 512,
              "portMappings": [
                {
                  "containerPort": 8080,
                  "hostPort": 8080
                }
              ],
              "environment": [
                {
                  "name": "APP_MESSAGE",
                  "value": "${APP_MESSAGE}"
                }
              ]
            }
          ]
          EOF

      - name: üß© Register new ECS Task Definition revision
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --container-definitions file://container-definitions.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: üì¶ Create CodeDeploy AppSpec revision file
        run: |
          jq -n \
            --arg taskDefArn "$NEW_TASK_DEF_ARN" \
            --arg containerName "$CONTAINER_NAME" \
            '{
              revisionType: "AppSpecContent",
              appSpecContent: {
                content: (
                  {
                    version: 1,
                    Resources: [
                      {
                        TargetService: {
                          Type: "AWS::ECS::Service",
                          Properties: {
                            TaskDefinition: $taskDefArn,
                            LoadBalancerInfo: {
                              ContainerName: $containerName,
                              ContainerPort: 8080
                            }
                          }
                        }
                      }
                    ]
                  } | @json
                ),
                sha256: ""
              }
            }' > revision.json

      - name: üöÄ Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --revision file://revision.json \
            --description "$APP_MESSAGE"

      - name: ‚è≥ Wait for deployment to complete
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name $CODEDEPLOY_APP_NAME \
            --deployment-group-name $CODEDEPLOY_GROUP_NAME \
            --query "deployments[0]" \
            --output text)

          aws deploy wait deployment-successful \
            --deployment-id $DEPLOYMENT_ID


